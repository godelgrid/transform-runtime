syntax = "proto3";

package transform.v1.control;

message ServerDetailsRequest {
}

message ServerDetailsResponse {
  string serverPid = 1;
}

message HeartbeatRequest {
}

message HeartbeatResponse {
  bool healthy = 1;
}

message LoadInlineModuleRequest {
  string transformationId = 1;
  string script = 2;
}

message LoadInlineModuleResponse {
  bool success = 1;
  string error = 2;
}

message VerifyInlineModuleRequest {
  string script = 1;
}

message VerifyInlineModuleResponse {
  bool success = 1;
  string error = 2;
}

enum ExternalRepoType {
  UNKNOWN_REPO = 0;
  GITHUB = 1;
  GITLAB = 2;
  BIT_BUCKET = 3;
}

message VerifyExternalModuleRequest {
  string transformationId = 1;
  ExternalRepoType repoType = 2;
  string repoPath = 3;
  string repoRef = 4;
  string accessToken = 5;
  string modulePath = 6;
  string requirementsPath = 7;
  string transformationName = 8;
}

message VerifyExternalModuleResponse {
  bool success = 1;
  string error = 2;
}

message LoadExternalModuleRequest {
  string transformationId = 1;
  ExternalRepoType repoType = 2;
  string repoPath = 3;
  string repoRef = 4;
  string accessToken = 5;
  string modulePath = 6;
  string requirementsPath = 7;
  string transformationName = 8;
}

message LoadExternalModuleResponse {
  bool success = 1;
  string error = 2;
}

service Control {
  rpc ServerDetails(ServerDetailsRequest) returns (ServerDetailsResponse);

  rpc HealthCheck(stream HeartbeatRequest) returns (stream HeartbeatResponse);

  rpc LoadInlineModule(LoadInlineModuleRequest) returns (LoadInlineModuleResponse);

  rpc VerifyInlineModule(VerifyInlineModuleRequest) returns (VerifyInlineModuleResponse);

  rpc VerifyExternalModule(VerifyExternalModuleRequest) returns (VerifyExternalModuleResponse);

  rpc LoadExternalModule(LoadExternalModuleRequest) returns (LoadExternalModuleResponse);
}
